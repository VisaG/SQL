/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.scu.IMDB.jform;

import edu.scu.IMDB.framework.MyFrame;
import static edu.scu.IMDB.framework.jdbcConnection.getConnection;
import java.awt.List;
import java.sql.Connection;
import java.util.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Year;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author visa
 */
public class ImdbMain extends MyFrame {

    DefaultListModel emptyList = new DefaultListModel();
    DefaultListModel listModel = new DefaultListModel();
    String attrName = null;
    String attrGenre = null;
    String S = null;
    String partQuery = null;
   

    /**
     * Creates new form ImdbMain
     */
    public ImdbMain() {
        initComponents();
        fillAllAttrs();

        setEnabled();
        setAndOrButtonFalse();

        displayQuery.setEditable(false);
        userButton.setEnabled(true);
        

    }

    public static ImdbMain getInstance() {
        return ImdbMainHolder.INSTANCE;
    }

    private static class ImdbMainHolder {

        private static final ImdbMain INSTANCE = new ImdbMain();
    }

    public void reset() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        rateCondition = new javax.swing.JComboBox<>();
        rateValue = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        numCondition = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        numRateValue = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        yearFrom = new com.toedter.calendar.JYearChooser();
        yearTo = new com.toedter.calendar.JYearChooser();
        ratingButton = new javax.swing.JButton();
        addRating = new javax.swing.JButton();
        addNumRate = new javax.swing.JButton();
        addYear = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        userId = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        fromDate = new com.toedter.calendar.JDateChooser();
        toDate = new com.toedter.calendar.JDateChooser();
        userCondition = new javax.swing.JComboBox<>();
        userValue = new javax.swing.JTextField();
        userButton = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        movieList = new javax.swing.JList<>();
        searchMovie = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        displayQuery = new javax.swing.JTextArea();
        executeSingle = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        result = new javax.swing.JList<>();
        executeAnd = new javax.swing.JButton();
        executeOr = new javax.swing.JButton();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SGenre = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        SCountry = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        SActor = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        SDirector = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        selectValue = new javax.swing.JTextArea();
        jLabel26 = new javax.swing.JLabel();
        attrButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        AGenre = new javax.swing.JList<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        ACountry = new javax.swing.JList<>();
        jScrollPane9 = new javax.swing.JScrollPane();
        AActor = new javax.swing.JList<>();
        jScrollPane10 = new javax.swing.JScrollPane();
        ADirector = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        addGenre = new javax.swing.JButton();
        addCountry = new javax.swing.JButton();
        addActor = new javax.swing.JButton();
        addDirector = new javax.swing.JButton();
        searchCountry = new javax.swing.JButton();
        searchActor = new javax.swing.JButton();
        searchDirector = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        queryBuilder = new javax.swing.JTextArea();
        andButton = new javax.swing.JButton();
        orButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("Rating:");

        rateCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select:", "<", ">", "=", "<=", "=>" }));

        rateValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateValueActionPerformed(evt);
            }
        });

        jLabel14.setText("Value:");

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setText("Num Rating:");

        numCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select:", "<", ">", "=", "<=", "=>" }));

        jLabel16.setText("Value:");

        numRateValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numRateValueActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("Movie Year:");

        jLabel18.setText("From:");

        jLabel19.setText("To:");

        ratingButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ratingButton.setText("Search by Rating");
        ratingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratingButtonActionPerformed(evt);
            }
        });

        addRating.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addRating.setText("ADD");
        addRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRatingActionPerformed(evt);
            }
        });

        addNumRate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addNumRate.setText("ADD");
        addNumRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNumRateActionPerformed(evt);
            }
        });

        addYear.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addYear.setText("ADD");
        addYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addYearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rateCondition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(rateValue))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numCondition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(numRateValue))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(addRating)
                            .addComponent(addNumRate)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(yearFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(yearTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addYear)
                    .addComponent(ratingButton))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(ratingButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(rateCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(rateValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(addRating)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(numCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numRateValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addComponent(addNumRate)
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(yearFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(yearTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addYear)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel20.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel20.setText("User Ratings:");

        jLabel21.setText("User Id:");

        userId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userIdActionPerformed(evt);
            }
        });

        jLabel22.setText("From:");

        jLabel23.setText("To:");

        jLabel24.setText("User Rating:");

        jLabel25.setText("Value:");

        fromDate.setDateFormatString("MMM dd, yyyy");

        toDate.setDateFormatString("MMM dd, yyyy");

        userCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select:", "<", ">", "=", "<=", "=>" }));

        userButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        userButton.setText("Search by User Id");
        userButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userButtonActionPerformed(evt);
            }
        });

        jScrollPane12.setViewportView(movieList);

        searchMovie.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchMovie.setText("Search Movie Info");
        searchMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMovieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(userCondition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addGap(18, 18, 18)
                                .addComponent(userValue))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel21)
                                        .addGap(18, 18, 18)
                                        .addComponent(userId, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(userButton, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchMovie)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(userButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(userId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(userCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(userValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchMovie)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane12)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        displayQuery.setColumns(20);
        displayQuery.setRows(5);
        jScrollPane5.setViewportView(displayQuery);

        executeSingle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        executeSingle.setText("Execute Single Query");
        executeSingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeSingleActionPerformed(evt);
            }
        });

        reset.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        reset.setText("RESET");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        jScrollPane15.setViewportView(result);

        executeAnd.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        executeAnd.setText("Execute AND Query");
        executeAnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeAndActionPerformed(evt);
            }
        });

        executeOr.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        executeOr.setText("Execute OR Query");
        executeOr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeOrActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(executeSingle)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(executeOr)
                                .addComponent(executeAnd))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(reset)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane15)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(executeSingle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(executeAnd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(executeOr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reset)
                        .addGap(36, 36, 36))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane1.setViewportView(SGenre);

        jScrollPane2.setViewportView(SCountry);

        jScrollPane3.setViewportView(SActor);

        jScrollPane4.setViewportView(SDirector);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Genre");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Country");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Actor");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Director");

        jButton2.setText("Add Genre");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Add Country");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Add Actor");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Add Director");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        selectValue.setColumns(20);
        selectValue.setRows(5);
        jScrollPane6.setViewportView(selectValue);

        jLabel26.setText("Selected Values:");

        attrButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        attrButton.setText("Search by Single Attribute");
        attrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attrButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attrButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4)
                                    .addComponent(jLabel3))
                                .addGap(43, 43, 43))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton5)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel26)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(attrButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addGap(0, 108, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane5.addTab("Single Attribute Selection", jPanel1);

        AGenre.setBounds(new java.awt.Rectangle(0, 0, 39, 136));
        jScrollPane7.setViewportView(AGenre);

        ACountry.setBounds(new java.awt.Rectangle(0, 0, 39, 136));
        jScrollPane8.setViewportView(ACountry);

        AActor.setBounds(new java.awt.Rectangle(0, 0, 39, 136));
        jScrollPane9.setViewportView(AActor);

        ADirector.setBounds(new java.awt.Rectangle(0, 0, 39, 136));
        jScrollPane10.setViewportView(ADirector);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("GENRE");

        addGenre.setText("Add Genre ");
        addGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGenreActionPerformed(evt);
            }
        });

        addCountry.setText("AND/OR Country");
        addCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCountryActionPerformed(evt);
            }
        });

        addActor.setText("AND/OR Actor");
        addActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActorActionPerformed(evt);
            }
        });

        addDirector.setText("AND/OR Director");
        addDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDirectorActionPerformed(evt);
            }
        });

        searchCountry.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchCountry.setText("Add Country");
        searchCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCountryActionPerformed(evt);
            }
        });

        searchActor.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchActor.setText("Add Actor");
        searchActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActorActionPerformed(evt);
            }
        });

        searchDirector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchDirector.setText("Add Director");
        searchDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDirectorActionPerformed(evt);
            }
        });

        queryBuilder.setColumns(20);
        queryBuilder.setRows(5);
        jScrollPane11.setViewportView(queryBuilder);

        andButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        andButton.setText("Search by AND");
        andButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andButtonActionPerformed(evt);
            }
        });

        orButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        orButton.setText("Search by OR");
        orButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(andButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(addGenre)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCountry)
                            .addComponent(searchCountry))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchActor)
                            .addComponent(addActor)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchDirector)
                                    .addComponent(addDirector)
                                    .addComponent(orButton))
                                .addGap(12, 12, 12))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                .addGap(101, 101, 101))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(andButton)
                    .addComponent(orButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchCountry, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchDirector, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(searchActor)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addGenre)
                    .addComponent(addCountry)
                    .addComponent(addActor)
                    .addComponent(addDirector))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("AND/OR Condition", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (!attrButton.isEnabled()) {
            System.out.print("I am here");

        } else if (!SGenre.isSelectionEmpty()) {
            SCountry.setEnabled(false);
            SActor.setEnabled(false);
            SDirector.setEnabled(false);
            rateValue.setEnabled(false);
            numRateValue.setEnabled(false);
            userId.setEnabled(false);
            yearFrom.setEnabled(false);
            yearTo.setEnabled(false);
            String S = attrSelectToString(SGenre);

            selectValue.setText(S);
            selectValue.setLineWrap(true);
        } else {
            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please make a selection", "Warning", confirmButton);
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:

        setEnabled();
        setAndOrButtonFalse();
        clearDisplay();

        ACountry.setEnabled(true);
        AActor.setEnabled(true);
        ADirector.setEnabled(true);
        AGenre.setEnabled(true);
        addCountry.setEnabled(true);
        addGenre.setEnabled(true);
        addActor.setEnabled(true);
        addDirector.setEnabled(true);
        movieList.clearSelection();

        andButton.setEnabled(true);
        orButton.setEnabled(true);
        searchMovie.setEnabled(false);

        userId.setText("");
        userValue.setText("");
        result.setModel(emptyList);


    }//GEN-LAST:event_resetActionPerformed

    private void addGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGenreActionPerformed
        // TODO add your handling code here:

        String temp = null;
        String fieldSelect = null;
        String fieldValue = null;
        String condition = null;
        String tableName = null;
        if ((orButton.isEnabled() && andButton.isEnabled())) {

            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please make a select AND or OR button to continue ", "Warning", confirmButton);
            addGenre.setEnabled(true);
        }

        if (orButton.isEnabled() && !andButton.isEnabled()) {

            if (!AGenre.isSelectionEmpty()) {
                fieldSelect = " G.MOVIEID ";
                fieldValue = " G.GENRE ";
                tableName = " MOVIEGENRE G";

                orQueryBuilder(AGenre, fieldSelect, tableName, fieldValue);

                addGenre.setEnabled(false);

            } else {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, "Please make a selection ", "Warning", confirmButton);
            }

        } else if (andButton.isEnabled() && !orButton.isEnabled()) {
            if (!AGenre.isSelectionEmpty()) {
                fieldValue = " M.ID ";
                condition = " INNER JOIN MOVIEGENRE G ON G.MOVIEID = M.ID ";

                temp = genreSelectionAttrBuilder(AGenre, fieldValue);
                andQueryBuilder(condition, temp);
                addGenre.setEnabled(false);

            } else {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, "Please make a selection ", "Warning", confirmButton);
            }
        }
    }//GEN-LAST:event_addGenreActionPerformed

    private void numRateValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numRateValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numRateValueActionPerformed

    private void userIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userIdActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (!SCountry.isSelectionEmpty()) {
            SGenre.setEnabled(false);
            SActor.setEnabled(false);
            SDirector.setEnabled(false);
            rateValue.setEnabled(false);
            numRateValue.setEnabled(false);
            userId.setEnabled(false);
            yearFrom.setEnabled(false);
            yearTo.setEnabled(false);

            S = (attrSelectToString(SCountry));
            selectValue.setText(S);
        } else {
            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please make a selection ", "Warning", confirmButton);
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (!SActor.isSelectionEmpty()) {
            SGenre.setEnabled(false);
            SCountry.setEnabled(false);
            SDirector.setEnabled(false);
            rateValue.setEnabled(false);
            numRateValue.setEnabled(false);
            userId.setEnabled(false);
            yearFrom.setEnabled(false);
            yearTo.setEnabled(false);

            S = attrSelectToString(SActor);
            selectValue.setText(S);
        } else {
            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please make a selection ", "Warning", confirmButton);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if (!SDirector.isSelectionEmpty()) {
            SGenre.setEnabled(false);
            SCountry.setEnabled(false);
            SActor.setEnabled(false);
            S = (attrSelectToString(SDirector));
            selectValue.setText(S);
        } else {

            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please make a selection ", "Warning", confirmButton);
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void executeSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeSingleActionPerformed
        // TODO add your handling code here:

        String tableName = null;
        String field = null;
        String value = null;
        String condition = null;
        String statement = null;
        int temp = 0;
        int fromYear, toYear = 0;

        if (ratingButton.isSelected()) {

            temp = yearFrom.getValue();

            if (!rateValue.getText().isEmpty() && numRateValue.getText().isEmpty()) {

                value = rateValue.getText();
                condition = (String) rateCondition.getSelectedItem();
                statement = "(M.RTALLCRITICSRATING+M.RTTOPCRITICSRATING+M.RTAUDIENCERATING)/3";
                DefaultListModel resultSet = getMovieByRatingOrNumRating(condition, value, statement);
                result.setModel(resultSet);

            } else if (!numRateValue.getText().isEmpty() && rateValue.getText().isEmpty()) {

                value = numRateValue.getText();
                condition = (String) numCondition.getSelectedItem();
                statement = "(M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3";
                DefaultListModel resultSet = getMovieByRatingOrNumRating(condition, value, statement);
                result.setModel(resultSet);

            } else if ((rateValue.getText().isEmpty() && numRateValue.getText().isEmpty())) {

                if ((yearFrom.getValue() < yearTo.getValue()) && (yearTo.getValue() <= Year.now().getValue())) {
                    fromYear = yearFrom.getValue();
                    toYear = yearTo.getValue();

                    DefaultListModel resultSet = getMovieByYear(fromYear, toYear);
                    result.setModel(resultSet);

                } else {
                    int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                    JOptionPane.showConfirmDialog(null, "Please select a valid range", "Warning", confirmButton);

                }

            }
        } else if (attrButton.isSelected()) {
            if (SGenre.isEnabled()) {
                tableName = "movieGenre";
                field = "genre";
            } else if (SCountry.isEnabled()) {
                tableName = "movieCountry";
                field = "country";
            } else if (SActor.isEnabled()) {
                tableName = "movieActor";
                field = "actorname";
            } else if (SDirector.isEnabled()) {
                tableName = "movieDirector";
                field = "directorname";
            }
            DefaultListModel resultSet = getMovieByAttribute(tableName, field, selectValue.getText());
            result.setModel(resultSet);

        } else if (userButton.isSelected()) {

            String userID = null;
            String userRate = null;
            String selection = null;

            int chooseDateFrom;
            int chooseDateTo;

            Calendar from = fromDate.getCalendar();
            int yearFrom = from.get(Calendar.YEAR);
            int monthFrom = from.get(Calendar.MONTH) + 1;
            int dateFrom = from.get(Calendar.DATE);

            Calendar to = toDate.getCalendar();
            int yearTo = to.get(Calendar.YEAR);
            int monthTo = to.get(Calendar.MONTH) + 1;
            int dateTo = to.get(Calendar.DATE);

            StringBuilder dayFrom = new StringBuilder();
            dayFrom.append(yearFrom);
            
            if (monthFrom < 10)
                dayFrom.append("0");
            dayFrom.append(monthFrom);
            
            if (dateFrom < 10)
                dayFrom.append("0");
            dayFrom.append(dateFrom);

            StringBuilder dayTo = new StringBuilder();
            dayTo.append(yearTo);
            
            if (monthTo < 10)
                dayTo.append("0");
            dayTo.append(monthTo);
            
            if (dateTo < 10)
                dayTo.append("0");
            dayTo.append(dateTo);
            
            chooseDateFrom = Integer.parseInt(dayFrom.toString());
            chooseDateTo = Integer.parseInt(dayTo.toString());

            if ((chooseDateFrom < chooseDateTo)) {

                userID = userId.getText();
                userRate = userValue.getText();
                selection = (String) userCondition.getSelectedItem();

               
                getUserMovieTag(userID, chooseDateFrom, chooseDateTo, selection, userRate);


            } else {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, "Please select a valid range", "Warning", confirmButton);
            }
        }else if (searchMovie.isEnabled()){
            
            String movieQuery = null;
            
            movieQuery = movieSelectionBuilder(movieList);
            

            
            getMovieInfo(movieQuery);
           
             
        }


    }//GEN-LAST:event_executeSingleActionPerformed

    private void ratingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratingButtonActionPerformed
        // TODO add your handling code here:

        attrButton.setSelected(false);
        ratingButton.setSelected(true);
        userButton.setSelected(false);

        rateValue.setEnabled(true);
        numRateValue.setEnabled(true);
        yearFrom.setEnabled(true);
        yearTo.setEnabled(true);

        SGenre.setEnabled(false);
        SCountry.setEnabled(false);
        SActor.setEnabled(false);
        SDirector.setEnabled(false);

        userId.setEnabled(false);
        userButton.setEnabled(true);
        userCondition.setEnabled(false);
        userValue.setEnabled(false);
        fromDate.setEnabled(false);
        toDate.setEnabled(false);
    }//GEN-LAST:event_ratingButtonActionPerformed

    private void attrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attrButtonActionPerformed
        // TODO add your handling code here:

        attrButton.setSelected(true);
        ratingButton.setSelected(false);
        userButton.setSelected(false);
        orButton.setEnabled(false);
        searchMovie.setEnabled(true);

        SGenre.setEnabled(true);
        SCountry.setEnabled(true);
        SActor.setEnabled(true);
        SDirector.setEnabled(true);

        rateValue.setEnabled(false);
        numRateValue.setEnabled(false);
        yearFrom.setEnabled(false);
        yearTo.setEnabled(false);
        userId.setEnabled(false);

        executeSingle.setEnabled(true);
        executeAnd.setEnabled(false);
        executeOr.setEnabled(false);
        ratingButton.setEnabled(true);

        userId.setEnabled(false);
        userButton.setEnabled(true);
        userCondition.setEnabled(false);
        userValue.setEnabled(false);
        fromDate.setEnabled(false);
        toDate.setEnabled(false);

        setAndOrButtonFalse();


    }//GEN-LAST:event_attrButtonActionPerformed
    // TODO add your handling code here:

    private void userButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userButtonActionPerformed

        clearDisplay();

        attrButton.setSelected(false);
        ratingButton.setSelected(false);
        userButton.setSelected(true);

        userId.setEnabled(true);
        userButton.setEnabled(true);
        userCondition.setEnabled(true);
        userValue.setEnabled(true);
        fromDate.setEnabled(true);
        toDate.setEnabled(true);

        SGenre.setEnabled(false);
        SCountry.setEnabled(false);
        SActor.setEnabled(false);
        SDirector.setEnabled(false);
        AGenre.setEnabled(false);
        rateValue.setEnabled(false);
        numRateValue.setEnabled(false);
        yearFrom.setEnabled(false);
        yearTo.setEnabled(false);
        setAndOrButtonFalse();
        executeSingle.setEnabled(true);
    }//GEN-LAST:event_userButtonActionPerformed

    private void searchCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCountryActionPerformed
        // TODO add your handling code here:

        String query = null;
        String fieldValue = null;
        String attrName = null;
        String tableName = null;
        String title = null;
        DefaultListModel attrList = null;
        boolean value = true;

        if (!AGenre.isSelectionEmpty()) {
            fieldValue = "C.MOVIEID";
            attrName = "C.COUNTRY";
            tableName = "MOVIECOUNTRY C";
            title = "COUNTRY";

            query = genreSelectionAttrBuilder(AGenre, fieldValue);

            attrList = getFieldBasedOnSelectionDB(attrName, tableName, fieldValue, query, title);
            ACountry.setModel(attrList);
            AGenre.setEnabled(false);
            if (attrList.isEmpty()) {
                value = false;
            }

            if (!value) {

                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please modify selection selection ", "Warning", confirmButton);
                AGenre.setEnabled(true);
                AGenre.clearSelection();
                queryBuilder.setText("");
                addGenre.setEnabled(true);

            }
        } else {
            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, " Please select Genre ", "Warning", confirmButton);
        }


    }//GEN-LAST:event_searchCountryActionPerformed

    private void addCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCountryActionPerformed
        // TODO add your handling code here:

        String fieldValue = null;
        String fieldSelect = null;
        String condition = null;
        String tableName = null;

        if (orButton.isEnabled()) {

            if (queryBuilder.getText().isEmpty()) {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please Select [Add Genre] to continue ", "Warning", confirmButton);
            }
            if (!AGenre.isSelectionEmpty() && !addGenre.isEnabled() && !ACountry.isSelectionEmpty()) {

                fieldSelect = " C.MOVIEID ";
                fieldValue = " C.COUNTRY ";
                tableName = " MOVIECOUNTRY C";

                orQueryBuilder(ACountry, fieldSelect, tableName, fieldValue);

                addCountry.setEnabled(false);

            } else {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, "Please make a selection ", "Warning", confirmButton);
            }

        } else if (andButton.isEnabled()) {
            if (queryBuilder.getText().isEmpty()) {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please Select [Add Genre] to continue ", "Warning", confirmButton);
            }

            if (!AGenre.isSelectionEmpty() && !addGenre.isEnabled() && !ACountry.isSelectionEmpty()) {
                fieldValue = "C.MOVIEID";
                condition = "INNER JOIN MOVIECOUNTRY C ON C.MOVIEID = M.ID";
                tableName = "MOVIECOUNTRY C";
                fieldSelect = "C.COUNTRY";

                attrSelectToQuery(ACountry, condition, fieldSelect, fieldValue, tableName);
                ACountry.setEnabled(false);
                addCountry.setEnabled(false);

            } else {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please make a selection ", "Warning", confirmButton);
            }
        }

    }//GEN-LAST:event_addCountryActionPerformed

    private void searchActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActorActionPerformed
        // TODO add your handling code here:

        String query = null;
        String fieldValue = null;
        String attrName = null;
        String tableName = null;
        String title = null;
        DefaultListModel attrList = null;
        boolean value = true;

        if (!AGenre.isSelectionEmpty()) {
            fieldValue = "A.MOVIEID";
            attrName = "A.ACTORNAME";
            tableName = "MOVIEACTOR A";
            title = "ACTORNAME";

            query = genreSelectionAttrBuilder(AGenre, fieldValue);

            attrList = getFieldBasedOnSelectionDB(attrName, tableName, fieldValue, query, title);
            AActor.setModel(attrList);
            if (attrList.isEmpty()) {
                value = false;
            }

            if (!value) {

                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please modify selection selection ", "Warning", confirmButton);
                AGenre.setEnabled(true);
                AGenre.clearSelection();
                queryBuilder.setText("");

            }
        } else {
            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, " Please select Genre ", "Warning", confirmButton);
        }


    }//GEN-LAST:event_searchActorActionPerformed

    private void addActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActorActionPerformed
        // TODO add your handling code here:
        String fieldValue = null;
        String fieldSelect = null;
        String condition = null;
        String tableName = null;

        if (orButton.isEnabled()) {

            if (queryBuilder.getText().isEmpty()) {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please Select [Add Genre] to continue ", "Warning", confirmButton);
            }
            if (!AGenre.isSelectionEmpty() && !addGenre.isEnabled() && !AActor.isSelectionEmpty()) {

                fieldSelect = " A.MOVIEID ";
                fieldValue = " A.ACTORNAME ";
                tableName = " MOVIEACTOR A";

                orQueryBuilder(AActor, fieldSelect, tableName, fieldValue);

                addActor.setEnabled(false);

            } else {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, "Please make a selection ", "Warning", confirmButton);
            }

        } else if (andButton.isEnabled()) {

            if (queryBuilder.getText().isEmpty()) {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please Select [Add Genre] to continue ", "Warning", confirmButton);
            }

            if (!AGenre.isSelectionEmpty() && !addGenre.isEnabled() && !AActor.isSelectionEmpty()) {
                fieldValue = "A.MOVIEID";
                condition = "INNER JOIN MOVIEACTOR A ON A.MOVIEID = M.ID";
                tableName = "MOVIEACTOR A";
                fieldSelect = "A.ACTORNAME";

                attrSelectToQuery(AActor, condition, fieldSelect, fieldValue, tableName);
                AActor.setEnabled(false);
                addActor.setEnabled(false);

            } else {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please make a selection ", "Warning", confirmButton);
            }
        }

    }//GEN-LAST:event_addActorActionPerformed

    private void searchDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDirectorActionPerformed
        // TODO add your handling code here:
        AGenre.setEnabled(false);

        String query = null;
        String fieldValue = null;
        String attrName = null;
        String tableName = null;
        String title = null;
        DefaultListModel attrList = null;
        boolean value = true;

        if (!AGenre.isSelectionEmpty()) {
            fieldValue = "D.MOVIEID";
            attrName = "D.DIRECTORNAME";
            tableName = "MOVIEDIRECTOR D";
            title = "DIRECTORNAME";

            query = genreSelectionAttrBuilder(AGenre, fieldValue);

            attrList = getFieldBasedOnSelectionDB(attrName, tableName, fieldValue, query, title);
            ADirector.setModel(attrList);
            if (attrList.isEmpty()) {
                value = false;
            }

            if (!value) {

                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please modify selection selection ", "Warning", confirmButton);
                AGenre.setEnabled(true);
                AGenre.clearSelection();
                queryBuilder.setText("");

            }
        } else {
            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, " Please select Genre ", "Warning", confirmButton);
        }


    }//GEN-LAST:event_searchDirectorActionPerformed

    private void addDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDirectorActionPerformed
        // TODO add your handling code here:
        String fieldValue = null;
        String fieldSelect = null;
        String condition = null;
        String tableName = null;

        if (orButton.isEnabled()) {

            if (queryBuilder.getText().isEmpty()) {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please Select [Add Genre] to continue ", "Warning", confirmButton);
            }
            if (!AGenre.isSelectionEmpty() && !addGenre.isEnabled() && !ADirector.isSelectionEmpty()) {

                fieldSelect = " D.MOVIEID ";
                fieldValue = " D.DIRECTORNAME ";
                tableName = " MOVIEDIRECTOR D";

                orQueryBuilder(ADirector, fieldSelect, tableName, fieldValue);

                addDirector.setEnabled(false);

            } else {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, "Please make a selection ", "Warning", confirmButton);
            }

        } else if (andButton.isEnabled()) {

            if (queryBuilder.getText().isEmpty()) {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please Select [Add Genre] to continue ", "Warning", confirmButton);
            }

            if (!AGenre.isSelectionEmpty() && !addGenre.isEnabled() && !AActor.isSelectionEmpty()) {
                fieldValue = "D.MOVIEID";
                condition = "INNER JOIN MOVIEDIRECTOR D ON D.MOVIEID = M.ID";
                tableName = "MOVIEDIRECTOR D";
                fieldSelect = "D.DIRECTORNAME";

                attrSelectToQuery(ADirector, condition, fieldSelect, fieldValue, tableName);
                ADirector.setEnabled(false);
                addDirector.setEnabled(false);

            } else {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " Please make a selection ", "Warning", confirmButton);
            }
        }

    }//GEN-LAST:event_addDirectorActionPerformed

    private void executeAndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeAndActionPerformed
        // TODO add your handling code here:
        String queryPart = null;

        queryPart = queryBuilder.getText();

        if (!addGenre.isEnabled() && (!addCountry.isEnabled() || !addActor.isEnabled() || !ADirector.isEnabled()
                || !addRating.isEnabled() || !addNumRate.isEnabled() || !addYear.isEnabled())) {

            DefaultListModel resultSet = getMovieByAndCondition(queryPart);
            result.setModel(resultSet);
            if (result.getModel().getSize() == 0) {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " NO movie found for the current selection! ", "Warning", confirmButton);
                displayQuery.setText("");
                queryBuilder.setText("");
            }
        } else {

            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please make a selection from Genre and one more "
                    + " attribute for AND condition", "Warning", confirmButton);

            displayQuery.setText("");

        }

    }//GEN-LAST:event_executeAndActionPerformed

    private void andButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andButtonActionPerformed
        // TODO add your handling code here:

        searchMovie.setEnabled(false);
        executeSingle.setEnabled(false);
        executeAnd.setEnabled(true);
        executeOr.setEnabled(false);
        ratingButton.setEnabled(false);

        orButton.setEnabled(false);

        addRating.setEnabled(true);
        addNumRate.setEnabled(true);
        addYear.setEnabled(true);
        rateValue.setEnabled(true);
        numRateValue.setEnabled(true);
        yearFrom.setEnabled(true);
        yearTo.setEnabled(true);

        userId.setEnabled(false);
        userButton.setEnabled(false);
        userCondition.setEnabled(false);
        userValue.setEnabled(false);
        fromDate.setEnabled(false);
        toDate.setEnabled(false);
        displayQuery.setText("");
    }//GEN-LAST:event_andButtonActionPerformed

    private void addRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRatingActionPerformed
        // TODO add your handling code here:
        String value = null;
        String condition = null;
        String statement = null;
        int rating = 0;

        value = rateValue.getText();
        rating = Integer.parseInt(value);

        if (!(value == null) && (rating >= 0) && !value.isEmpty()) {

            if (!orButton.isEnabled() && andButton.isEnabled()) {

                if (!addGenre.isEnabled()) {
                    value = rateValue.getText();
                    condition = (String) rateCondition.getSelectedItem();
                    statement = "(M.RTALLCRITICSRATING+M.RTTOPCRITICSRATING+M.RTAUDIENCERATING)/3";
                    selectAndRatingToQuery(value, condition, statement);
                    addRating.setEnabled(false);

                } else {

                    int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                    JOptionPane.showConfirmDialog(null, "Please Select Genre to Continue for AND condition", "Warning", confirmButton);
                    rateValue.setText("");
                    AGenre.clearSelection();
                    AGenre.setEnabled(true);
                    addRating.setEnabled(true);
                }

            } else if (orButton.isEnabled() && !andButton.isEnabled()) {

                if (!addGenre.isEnabled()) {

                    value = rateValue.getText();
                    condition = (String) rateCondition.getSelectedItem();
                    statement = "(M.RTALLCRITICSRATING+M.RTTOPCRITICSRATING+M.RTAUDIENCERATING)/3";
                    selectOrRatingToQuery(value, condition, statement);
                    addRating.setEnabled(false);

                } else {
                    int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                    JOptionPane.showConfirmDialog(null, "Please Select Genre to Continue for AND condition", "Warning", confirmButton);
                    rateValue.setText("");
                    AGenre.clearSelection();
                    AGenre.setEnabled(true);
                    addRating.setEnabled(true);
                }
            }
        } else {

            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please Select valid range to continue", "Warning", confirmButton);
            rateValue.setText("");
        }
    }//GEN-LAST:event_addRatingActionPerformed

    private void addNumRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNumRateActionPerformed
        // TODO add your handling code here:
        String value = null;
        String condition = null;
        String statement = null;
        int rating = 0;

        value = numRateValue.getText();
        rating = Integer.parseInt(value);

        if (!(value == null) && (rating >= 0) && !value.isEmpty()) {
            if (!orButton.isEnabled() && andButton.isEnabled()) {

                if (!addGenre.isEnabled()) {
                    value = numRateValue.getText();
                    condition = (String) numCondition.getSelectedItem();
                    statement = "(M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3";
                    selectAndRatingToQuery(value, condition, statement);
                    addNumRate.setEnabled(false);

                } else {

                    int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                    JOptionPane.showConfirmDialog(null, "Please Select Genre to Continue for AND/OR condition", "Warning", confirmButton);
                    numRateValue.setText("");
                    AGenre.clearSelection();
                    AGenre.setEnabled(true);
                    addNumRate.setEnabled(true);
                }

            } else if (orButton.isEnabled() && !andButton.isEnabled()) {

                if (!addGenre.isEnabled()) {

                    value = numRateValue.getText();
                    condition = (String) numCondition.getSelectedItem();
                    statement = "(M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3";
                    selectOrRatingToQuery(value, condition, statement);
                    addNumRate.setEnabled(false);

                } else {
                    int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                    JOptionPane.showConfirmDialog(null, "Please Select Genre to Continue for AND/OR condition", "Warning", confirmButton);
                    rateValue.setText("");
                    AGenre.clearSelection();
                    AGenre.setEnabled(true);
                    addNumRate.setEnabled(true);
                }
            }
        } else {

            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please Select valid range to continue", "Warning", confirmButton);
            numRateValue.setText("");
        }
    }//GEN-LAST:event_addNumRateActionPerformed

    private void addYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addYearActionPerformed
        // TODO add your handling code here:
        String movieQuery = null;

        if ((yearTo.getValue() > yearFrom.getValue()) && (yearTo.getValue() <= Year.now().getValue())) {

            if (!addGenre.isEnabled()) {
                if (!orButton.isEnabled() && andButton.isEnabled()) {

                    movieQuery = queryBuilder.getText() + "AND (M.YEAR >= " + yearFrom.getValue() + ") AND (M.YEAR <= " + yearTo.getValue() + " )";

                    queryBuilder.setText(movieQuery);
                    addYear.setEnabled(false);

                }
                if (orButton.isEnabled() && !andButton.isEnabled()) {

                    movieQuery = queryBuilder.getText() + " UNION SELECT "
                            + "M.ID FROM MOVIE M WHERE (M.YEAR >= "
                            + yearFrom.getValue() + ") AND (M.YEAR <= " + yearTo.getValue() + " )";

                    queryBuilder.setText(movieQuery);
                    addYear.setEnabled(false);
                }

            } else {

                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, "Please Select Genre to Continue for AND/OR condition", "Warning", confirmButton);
                addYear.setEnabled(true);

            }
        } else {
            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please select a valid range", "Warning", confirmButton);

        }


    }//GEN-LAST:event_addYearActionPerformed

    private void orButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orButtonActionPerformed
        // TODO add your handling code here:

        searchMovie.setEnabled(false);
        executeSingle.setEnabled(false);
        executeAnd.setEnabled(false);
        executeOr.setEnabled(true);
        ratingButton.setEnabled(false);
        andButton.setEnabled(false);

        orButton.setEnabled(true);

        addRating.setEnabled(true);
        addNumRate.setEnabled(true);
        addYear.setEnabled(true);
        rateValue.setEnabled(true);
        numRateValue.setEnabled(true);
        yearFrom.setEnabled(true);
        yearTo.setEnabled(true);

        userId.setEnabled(false);
        userButton.setEnabled(false);
        userCondition.setEnabled(false);
        userValue.setEnabled(false);
        fromDate.setEnabled(false);
        toDate.setEnabled(false);
        displayQuery.setText("");
    }//GEN-LAST:event_orButtonActionPerformed

    private void executeOrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeOrActionPerformed
        // TODO add your handling code here:

        String queryPart = null;

        queryPart = queryBuilder.getText();

        if (!addGenre.isEnabled() && (!addCountry.isEnabled() || !addActor.isEnabled() || !ADirector.isEnabled()
                || !addRating.isEnabled() || !addNumRate.isEnabled() || !addYear.isEnabled())) {

            DefaultListModel resultSet = getMovieByOrCondition(queryPart);
            result.setModel(resultSet);
            if (result.getModel().getSize() == 0) {
                int confirmButton = JOptionPane.OK_CANCEL_OPTION;
                JOptionPane.showConfirmDialog(null, " NO movie found for the current selection! ", "Warning", confirmButton);
                displayQuery.setText("");
                displayQuery.setWrapStyleWord(true);
            }
        } else {

            int confirmButton = JOptionPane.OK_CANCEL_OPTION;
            JOptionPane.showConfirmDialog(null, "Please make a selection from Genre and one more "
                    + " attribute for AND condition", "Warning", confirmButton);
            queryBuilder.setText("");
            AGenre.clearSelection();
            displayQuery.setText("");
            AGenre.setEnabled(true);

        }
    }//GEN-LAST:event_executeOrActionPerformed

    private void rateValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rateValueActionPerformed

    private void searchMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMovieActionPerformed
        // TODO add your handling code here:
        movieList.setEnabled(true);
        clearDisplay();

        attrButton.setSelected(false);
        ratingButton.setSelected(false);
        userButton.setSelected(false);


        SGenre.setEnabled(false);
        SCountry.setEnabled(false);
        SActor.setEnabled(false);
        SDirector.setEnabled(false);
        AGenre.setEnabled(false);
        rateValue.setEnabled(false);
        numRateValue.setEnabled(false);
        yearFrom.setEnabled(false);
        yearTo.setEnabled(false);
        setAndOrButtonFalse();
        executeSingle.setEnabled(true);
    }//GEN-LAST:event_searchMovieActionPerformed

    private void setEnabled() {

        SGenre.setEnabled(false);
        SCountry.setEnabled(false);
        SActor.setEnabled(false);
        SDirector.setEnabled(false);

        rateValue.setEnabled(false);
        numRateValue.setEnabled(false);
        yearFrom.setEnabled(false);
        yearTo.setEnabled(false);
        userId.setEnabled(false);

        executeSingle.setEnabled(false);
        executeAnd.setEnabled(false);
        executeOr.setEnabled(false);
        ratingButton.setEnabled(false);

        userId.setEnabled(false);
        userButton.setEnabled(false);
        userCondition.setEnabled(false);
        userValue.setEnabled(false);
        fromDate.setEnabled(false);
        toDate.setEnabled(false);

        attrButton.setEnabled(true);
        orButton.setEnabled(true);
        movieList.setEnabled(false);

    }

    private void setAndOrButtonFalse() {
        addRating.setEnabled(false);
        addNumRate.setEnabled(false);
        addYear.setEnabled(false);

    }

    private void clearDisplay() {

        SGenre.clearSelection();
        SCountry.clearSelection();
        SActor.clearSelection();
        SDirector.clearSelection();

        AGenre.clearSelection();
        ACountry.clearSelection();
        AActor.clearSelection();

        rateValue.setText("");
        numRateValue.setText("");
        userId.setText("");
        queryBuilder.setText("");

        displayQuery.setText("");
        selectValue.setText("");

        ACountry.setModel(emptyList);
        AActor.setModel(emptyList);
        ADirector.setModel(emptyList);
        result.setModel(emptyList);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImdbMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImdbMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImdbMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImdbMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImdbMain().setVisible(true);
            }
        });
    }

    public static String attrSelectToString(javax.swing.JList<String> attrJList) {

        Object[] genreList = attrJList.getSelectedValues();

        StringBuilder attrSelect = new StringBuilder();

        for (int i = 0; i < genreList.length; i++) {

            attrSelect.append(genreList[i]);

            attrSelect.append(",");
        }

        //Remove the extra comma and space
        if (attrSelect != null) {
            int index = attrSelect.length();
            if (index > 1) {
                attrSelect.deleteCharAt(index - 1);
            }
        }

        return attrSelect.toString();

    }

    public void attrSelectToQuery(javax.swing.JList<String> attrJList, String condition,
            String fieldSelect, String fieldValue, String tableName) {

        String attrQuery = null;
        String attrQueryPrev = queryBuilder.getText();

        Object[] genreList = attrJList.getSelectedValues();

        StringBuilder attrSelectQuery = new StringBuilder();

        for (int i = 0; i < genreList.length; i++) {

            if (genreList[i].toString().contains("'")) {

                attrSelectQuery.append("'");

                attrSelectQuery.append(genreList[i].toString().replaceAll("'", "''"));

                attrSelectQuery.append("'");

                attrSelectQuery.append(",");
            } else {
                attrSelectQuery.append("'");

                attrSelectQuery.append(genreList[i]);

                attrSelectQuery.append("'");

                attrSelectQuery.append(",");
            }

        }

        //Remove the extra comma and space
        if (attrSelectQuery != null) {
            int index = attrSelectQuery.length();
            if (index > 1) {
                attrSelectQuery.deleteCharAt(index - 1);
            }
        }
        attrQuery = condition + " " + attrQueryPrev + " AND M.ID in "
                + "( SELECT DISTINCT " + fieldValue + " FROM " + tableName + " WHERE "
                + fieldSelect + " in ( " + attrSelectQuery.toString() + " ))";

        queryBuilder.setText(attrQuery);

    }
    
     private String movieSelectionBuilder(javax.swing.JList<String> attrJList) {

        String attrQuery = null;
        String attrQueryPrev = queryBuilder.getText();

        Object[] genreList = attrJList.getSelectedValues();

        StringBuilder attrSelectQuery = new StringBuilder();

        for (int i = 0; i < genreList.length; i++) {

            if (genreList[i].toString().contains("'")) {

                attrSelectQuery.append("'");

                attrSelectQuery.append(genreList[i].toString().replaceAll("'", "''"));

                attrSelectQuery.append("'");

                attrSelectQuery.append(",");
            } else {
                attrSelectQuery.append("'");

                attrSelectQuery.append(genreList[i]);

                attrSelectQuery.append("'");

                attrSelectQuery.append(",");
            }

        }

        //Remove the extra comma and space
        if (attrSelectQuery != null) {
            int index = attrSelectQuery.length();
            if (index > 1) {
                attrSelectQuery.deleteCharAt(index - 1);
            }
        }
        
        attrQuery =  attrSelectQuery.toString();

      return attrQuery;
    }

    private String genreSelectionAttrBuilder(javax.swing.JList<String> attrJList, String fieldValue) {

        displayQuery.setText("");

        Object[] genreList = attrJList.getSelectedValues();

        StringBuilder attrSelectQuery = new StringBuilder();

        for (int i = 0; i < genreList.length; i++) {

            if (genreList[i].toString().contains("'")) {

                attrSelectQuery.append("'");

                attrSelectQuery.append(genreList[i].toString().replaceAll("'", "''"));

                attrSelectQuery.append("'");

                attrSelectQuery.append(",");
            } else {
                attrSelectQuery.append(" ");
                attrSelectQuery.append(fieldValue);
                attrSelectQuery.append(" in (SELECT G.MOVIEID "
                        + "from MOVIEGENRE G WHERE G.GENRE = '");
                attrSelectQuery.append(genreList[i]);
                attrSelectQuery.append("' )");

                attrSelectQuery.append(" AND");
            }

        }

        if (attrSelectQuery != null) {
            int index = attrSelectQuery.length();
            if (index > 1) {
                attrSelectQuery.delete(index - 3, index);

            }
        }
        displayQuery.setText(attrSelectQuery.toString());
        displayQuery.setLineWrap(true);

        return attrSelectQuery.toString();

    }

    public void orQueryBuilder(javax.swing.JList<String> attrJList,
            String fieldSelect, String tableName, String fieldValue) {

        String attrQuery = null;
        String attrQueryPrev = null;

        Object[] genreList = attrJList.getSelectedValues();

        StringBuilder attrSelectQuery = new StringBuilder();

        for (int i = 0; i < genreList.length; i++) {

            if (genreList[i].toString().contains("'")) {

                attrSelectQuery.append("'");

                attrSelectQuery.append(genreList[i].toString().replaceAll("'", "''"));

                attrSelectQuery.append("'");

                attrSelectQuery.append(",");
            } else {
                attrSelectQuery.append("'");

                attrSelectQuery.append(genreList[i]);

                attrSelectQuery.append("'");

                attrSelectQuery.append(",");
            }

        }

        //Remove the extra comma and space
        if (attrSelectQuery != null) {
            int index = attrSelectQuery.length();
            if (index > 1) {
                attrSelectQuery.deleteCharAt(index - 1);
            }
        }
        if (queryBuilder.getText().isEmpty()) {
            attrQuery = "SELECT" + fieldSelect + "FROM" + tableName + " WHERE " + fieldValue
                    + " IN ( " + attrSelectQuery.toString() + " )";
            queryBuilder.setText(attrQuery);
        } else {
            attrQueryPrev = queryBuilder.getText();

            attrQuery = attrQueryPrev + " UNION SELECT" + fieldSelect + "FROM" + tableName + " WHERE " + fieldValue
                    + " IN ( " + attrSelectQuery.toString() + " )";
            queryBuilder.setText(attrQuery);

        }

    }

    public void andQueryBuilder(String condition, String partQuery) {

        String temp = null;

        if (queryBuilder.getText().isEmpty()) {
            temp = condition + "WHERE" + partQuery;
            queryBuilder.setText(temp);
            queryBuilder.setWrapStyleWord(true);
        }

    }

    public void selectAndRatingToQuery(String value, String condition, String statement) {

        String ratingQuery = null;

        ratingQuery = queryBuilder.getText() + " and " + statement + " " + condition + " " + value;

        queryBuilder.setText(ratingQuery);

    }

    public void selectOrRatingToQuery(String value, String condition, String statement) {

        String ratingQuery = null;

        ratingQuery = queryBuilder.getText() + " UNION SELECT M.ID FROM "
                + "MOVIE M WHERE  " + statement + " " + condition + " " + value;

        queryBuilder.setText(ratingQuery);

    }

    private void fillAttr(String attr, javax.swing.JList<String> attrJList1) {
        DefaultListModel attrList = getAttrsFromDB(attr);
        attrJList1.setModel(attrList);

    }

    private void fillAttr(String attr,
            javax.swing.JList<String> attrJList1,
            javax.swing.JList<String> attrJList2) {
        DefaultListModel attrList = getAttrsFromDB(attr);
        attrJList1.setModel(attrList);
        attrJList2.setModel(attrList);

    }

    private void fillAllAttrs() {

        fillAttr("genre", SGenre, AGenre);
        fillAttr("country", SCountry);
        fillAttr("directorName", SDirector);
        fillAttr("actorName", SActor);
        fillAttr("title", movieList);

    }

    private DefaultListModel getAttrsFromDB(String attrName) {

        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        DefaultListModel attrList = new DefaultListModel();

        try {

            String sql = null;

            switch (attrName) {
                case "genre":
                    sql = "SELECT DISTINCT genre FROM movieGenre ORDER BY genre";
                    break;
                case "country":
                    sql = "SELECT DISTINCT country FROM movieCountry ORDER BY country ";
                    break;
                case "actorName":
                    sql = "SELECT DISTINCT actorName FROM movieActor ORDER BY actorName ";
                    break;
                case "directorName":
                    sql = "SELECT DISTINCT directorName FROM movieDirector ORDER BY directorName ";
                    break;
                case "title" : 
                    sql = "SELECT DISTINCT title FROM movie ORDER BY title ";
                    break;
            }

            conn = getConnection();

            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();

            while (rs.next()) {

                attrList.addElement(rs.getString(attrName));

            }

            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return attrList;
        }
    }

    public void getUserMovieTag(String userId, int chooseDateFrom, int chooseDateTo,
            String selection, String rate) {

        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        DefaultListModel attrList = new DefaultListModel();
        String sql = null;
       

        try {

            
            sql = "SELECT DISTINCT M.ID, M.TITLE, U.RATING,U.DATE_YEAR,T.VALUE "
                    + "FROM USERRATEMOVIE U, MOVIE M, TAGS T, USERTAGMOVIE UT, MOVIETAGS MT "
                    + "WHERE M.ID = U.MOVIEID AND MT.MOVIEID = UT.MOVIEID "
                    + "AND U.USERID = UT.USERID AND MT.TAGID = T.ID  "
                    + "AND U.USERID = "+ userId + " AND TO_NUMBER(CAST(U.DATE_YEAR AS VARCHAR(10)) "
                    + "|| LPAD(CAST(U.DATE_MONTH as VARCHAR(2)), 2, '0') "
                    + "|| LPAD(CAST(U.DATE_DAY as VARCHAR(2)), 2, '0')) "
                    + "BETWEEN " +chooseDateFrom + " AND " 
                    + chooseDateTo + " AND U.RATING " + selection + " " + rate;
            
        

            displayQuery.setText(sql);
            displayQuery.setLineWrap(true);
            conn = getConnection();

            pst = conn.prepareStatement(sql);
          
            rs = pst.executeQuery();
            String idBuffer = null;

            while (rs.next()) {

                if (idBuffer != null && (!idBuffer.isEmpty())
                        && idBuffer.contentEquals(rs.getString("ID"))) {
                    String str = attrList.lastElement().toString();
                    str = str + " , " + rs.getString("VALUE");
                    attrList.setElementAt(str, attrList.getSize() - 1);
                } else {
                    idBuffer = rs.getString("ID");
                    attrList.addElement("Movie ID: " + idBuffer + " , Movie Title: " + rs.getString("TITLE")
                            + " , User_Tag_Year: " + rs.getString("DATE_YEAR"));

                    attrList.addElement("User Rating: " + rs.getString("RATING"));

                    attrList.addElement("Movie Tag: " + rs.getString("VALUE"));
                }
            }
            result.setModel(attrList);
            

            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }

    }

    private DefaultListModel getMovieByAttribute(String tableName, String field, String attribute) {

        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        DefaultListModel attrList = new DefaultListModel();
        String sql = null;

        try {
            if (tableName.equalsIgnoreCase("movieGenre")) {
                sql = "SELECT DISTINCT M.ID, M.TITLE, M.YEAR, ROUND(((M.RTALLCRITICSRATING + M.RTTOPCRITICSRATING + M.RTAUDIENCERATING)/3),2) AS RATING"
                        + ", ROUND(((M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3),2) AS NUMRATING "
                        + ", movieGenre.GENRE FROM movie M," + tableName
                        + " where M.ID = " + tableName + ".MOVIEID and " + tableName + "." + field + " IN (";
            } else {
                sql = "SELECT DISTINCT M.ID, M.TITLE, M.YEAR, ROUND(((M.RTALLCRITICSRATING + M.RTTOPCRITICSRATING + M.RTAUDIENCERATING)/3),2) AS RATING"
                        + ", ROUND(((M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3),2) AS NUMRATING "
                        + ", movieGenre.GENRE FROM movie M, movieGenre, " + tableName
                        + " where M.ID = movieGenre.MOVIEID AND M.ID = " + tableName + ".MOVIEID and " + tableName + "." + field + " IN (";

            }
            StringBuilder sb = new StringBuilder();
            ArrayList aList = new ArrayList(Arrays.asList(attribute.split(",")));
            int index = aList.size();

            for (int i = 0; i < index; i++) {
                sb.append("?,");
            }
            if (index > 0) {
                sb.setLength(sb.length() - 1);
            }

            sql = sql + sb.toString() + ") ORDER BY M.ID";

            displayQuery.setText(sql);
            displayQuery.setLineWrap(true);

            conn = getConnection();

            pst = conn.prepareStatement(sql);

            for (int i = 0; i < index; i++) {
                String s = aList.get(i).toString();
                pst.setString(i + 1, s);
            }

            rs = pst.executeQuery();

            String idBuffer = null;

            while (rs.next()) {

                if (idBuffer != null && (!idBuffer.isEmpty())
                        && idBuffer.contentEquals(rs.getString("ID"))) {
                    String str = attrList.lastElement().toString();
                    str = str + " , " + rs.getString("GENRE");
                    attrList.setElementAt(str, attrList.getSize() - 1);

                } else {
                    idBuffer = rs.getString("ID");
                    attrList.addElement("Movie ID: " + idBuffer + " , Movie Title: " + rs.getString("TITLE")
                            + " , Year: " + rs.getString("YEAR"));

                    attrList.addElement("Average Rating: " + rs.getString("RATING")
                            + " , Average Num. Rating: " + rs.getString("NUMRATING"));

                    attrList.addElement("Genre: " + rs.getString("GENRE"));
                }
            }

            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return attrList;
        }
    }
    
    public void getMovieInfo( String attribute) {

        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        DefaultListModel attrList = new DefaultListModel();
        String sql = null;
        String query = null;
      
        try {
                sql = "SELECT DISTINCT M.ID, M.TITLE, M.YEAR, ROUND(((M.RTALLCRITICSRATING + M.RTTOPCRITICSRATING + M.RTAUDIENCERATING)/3),2) AS RATING"
                        + ", ROUND(((M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3),2) AS NUMRATING "
                        + ", G.GENRE, C.COUNTRY FROM movie M, movieGenre G, movieCountry C "
                        + " where M.ID = G.MOVIEID AND C.MOVIEID = M.ID AND M.TITLE IN (" + attribute + " )";

            
            
            displayQuery.setText(sql);
            displayQuery.setLineWrap(true);

            conn = getConnection();

            pst = conn.prepareStatement(sql);

            
            rs = pst.executeQuery();

            String idBuffer = null;

            while (rs.next()) {

                if (idBuffer != null && (!idBuffer.isEmpty())
                        && idBuffer.contentEquals(rs.getString("ID"))) {
                    String str = attrList.lastElement().toString();
                    str = str + " , " + rs.getString("GENRE");
                    attrList.setElementAt(str, attrList.getSize() - 1);

                } else {
                    idBuffer = rs.getString("ID");
                    attrList.addElement("Movie ID: " + idBuffer + " , Movie Title: " + rs.getString("TITLE")
                            + " , Year: " + rs.getString("YEAR"));

                    attrList.addElement("Average Rating: " + rs.getString("RATING")
                            + " , Average Num. Rating: " + rs.getString("NUMRATING") 
                    + " Country : " + rs.getString("COUNTRY"));

                    attrList.addElement("Genre: " + rs.getString("GENRE"));
                }
            }
            result.setModel(attrList);
            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
        }
    }

    private DefaultListModel getMovieByAndCondition(String query) {

        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        DefaultListModel attrList = new DefaultListModel();
        String sql = null;

        try {

            sql = "SELECT DISTINCT M.ID, M.TITLE, M.YEAR, ROUND(((M.RTALLCRITICSRATING + M.RTTOPCRITICSRATING + M.RTAUDIENCERATING)/3),2) AS RATING "
                    + ", ROUND(((M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3),2) AS NUMRATING, G.GENRE "
                    + "FROM movie M, MOVIEGENRE G WHERE M.ID = G.MOVIEID AND M.ID IN (SELECT M.ID FROM MOVIE M " + query + " ) ORDER BY M.ID";

            displayQuery.setText(sql);
            displayQuery.setLineWrap(true);
            conn = getConnection();

            pst = conn.prepareStatement(sql);

            rs = pst.executeQuery();
            String idBuffer = null;

            while (rs.next()) {

                if (idBuffer != null && (!idBuffer.isEmpty())
                        && idBuffer.contentEquals(rs.getString("ID"))) {
                    String str = attrList.lastElement().toString();
                    str = str + " , " + rs.getString("GENRE");
                    attrList.setElementAt(str, attrList.getSize() - 1);
                } else {
                    idBuffer = rs.getString("ID");
                    attrList.addElement("Movie ID: " + idBuffer + " , Movie Title: " + rs.getString("TITLE")
                            + " , Year: " + rs.getString("YEAR"));

                    attrList.addElement("Average Rating: " + rs.getString("RATING")
                            + " , Average Num. Rating: " + rs.getString("NUMRATING"));

                    attrList.addElement("Genre: " + rs.getString("GENRE"));
                }
            }

            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return attrList;
        }
    }

    private DefaultListModel getMovieByOrCondition(String query) {

        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        DefaultListModel attrList = new DefaultListModel();
        String sql = null;

        try {

            sql = "SELECT DISTINCT M.ID, M.TITLE, M.YEAR, ROUND(((M.RTALLCRITICSRATING + M.RTTOPCRITICSRATING + M.RTAUDIENCERATING)/3),2) AS RATING "
                    + ", ROUND(((M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3),2) AS NUMRATING, G.GENRE "
                    + "FROM movie M, MOVIEGENRE G WHERE M.ID = G.MOVIEID AND M.ID IN ( " + query + " ) ORDER BY M.ID";

            displayQuery.setText(sql);
            displayQuery.setLineWrap(true);
            conn = getConnection();

            pst = conn.prepareStatement(sql);
            //pst.setString(1, query);

            rs = pst.executeQuery();
            String idBuffer = null;

            while (rs.next()) {

                if (idBuffer != null && (!idBuffer.isEmpty())
                        && idBuffer.contentEquals(rs.getString("ID"))) {
                    String str = attrList.lastElement().toString();
                    str = str + " , " + rs.getString("GENRE");
                    attrList.setElementAt(str, attrList.getSize() - 1);
                } else {
                    idBuffer = rs.getString("ID");
                    attrList.addElement("Movie ID: " + idBuffer + " , Movie Title: " + rs.getString("TITLE")
                            + " , Year: " + rs.getString("YEAR"));

                    attrList.addElement("Average Rating: " + rs.getString("RATING")
                            + " , Average Num. Rating: " + rs.getString("NUMRATING"));

                    attrList.addElement("Genre: " + rs.getString("GENRE"));
                }
            }

            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return attrList;
        }
    }

    private DefaultListModel getMovieByRatingOrNumRating(String condition, String value, String statement) {

        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        DefaultListModel attrList = new DefaultListModel();
        String sql = null;

        try {

            sql = "SELECT DISTINCT M.ID, M.TITLE, M.YEAR, "
                    + "ROUND(((M.RTALLCRITICSRATING + M.RTTOPCRITICSRATING + M.RTAUDIENCERATING)/3),2) AS RATING "
                    + ", ROUND(((M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3),2) AS NUMRATING"
                    + ", G.GENRE FROM movie M, movieGenre G WHERE M.ID = G.MOVIEID AND  " + statement + " "
                    + condition + " " + value + " ORDER BY M.ID ";

            displayQuery.setText(sql);
            displayQuery.setLineWrap(true);

            conn = getConnection();

            pst = conn.prepareStatement(sql);

            rs = pst.executeQuery();

            String idBuffer = null;

            while (rs.next()) {

                if (idBuffer != null && (!idBuffer.isEmpty())
                        && idBuffer.contentEquals(rs.getString("ID"))) {
                    String str = attrList.lastElement().toString();
                    str = str + " , " + rs.getString("GENRE");
                    attrList.setElementAt(str, attrList.getSize() - 1);
                } else {
                    idBuffer = rs.getString("ID");
                    attrList.addElement("Movie ID: " + idBuffer + " , Movie Title: " + rs.getString("TITLE")
                            + " , Year: " + rs.getString("YEAR"));

                    attrList.addElement("Average Rating: " + rs.getString("RATING")
                            + " , Average Num. Rating: " + rs.getString("NUMRATING"));

                    attrList.addElement("Genre: " + rs.getString("GENRE"));
                }

            }

            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return attrList;
        }
    }

    private DefaultListModel getFieldBasedOnSelectionDB(String attrName, String tableName, String fieldValue, String query, String title) {

        Connection conn = null;
        String sql = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        DefaultListModel attrList = new DefaultListModel();

        try {

            sql = "SELECT DISTINCT " + attrName + " FROM " + tableName
                    + " INNER JOIN MOVIEGENRE G ON " + fieldValue + " = G.MOVIEID "
                    + "WHERE " + query + " ORDER BY " + attrName;

            conn = getConnection();

            pst = conn.prepareStatement(sql);

            rs = pst.executeQuery();

            while (rs.next()) {

                attrList.addElement(rs.getString(title));

            }

            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return attrList;
        }
    }

    private DefaultListModel getMovieByYear(Integer fromYear, Integer toYear) {

        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        DefaultListModel attrList = new DefaultListModel();
        String sql = null;

        try {

            sql = "SELECT DISTINCT M.ID, M.TITLE, M.YEAR, "
                    + "ROUND(((M.RTALLCRITICSRATING + M.RTTOPCRITICSRATING + M.RTAUDIENCERATING)/3),2) AS RATING"
                    + ", ROUND(((M.RTALLCRITICSNUMREVIEWS + M.RTTOPCRITICSNUMREVIEWS + M.RTAUDIENCENUMRATINGS)/3),2) AS NUMRATING "
                    + ", G.GENRE FROM movie M, movieGenre G WHERE M.ID = G.MOVIEID AND (M.YEAR >= " + fromYear + ") AND (M.YEAR <= " + toYear + " ) ORDER BY M.ID";

            displayQuery.setText(sql);
            displayQuery.setLineWrap(true);

            conn = getConnection();

            pst = conn.prepareStatement(sql);

            rs = pst.executeQuery();

            String idBuffer = null;

            while (rs.next()) {

                if (idBuffer != null && (!idBuffer.isEmpty())
                        && idBuffer.contentEquals(rs.getString("ID"))) {
                    String str = attrList.lastElement().toString();
                    str = str + " , " + rs.getString("GENRE");
                    attrList.setElementAt(str, attrList.getSize() - 1);
                } else {
                    idBuffer = rs.getString("ID");
                    attrList.addElement("Movie ID: " + idBuffer + " , Movie Title: " + rs.getString("TITLE")
                            + " , Year: " + rs.getString("YEAR"));

                    attrList.addElement("Average Rating: " + rs.getString("RATING")
                            + " , Average Num. Rating: " + rs.getString("NUMRATING"));

                    attrList.addElement("Genre: " + rs.getString("GENRE"));
                }

            }

            rs.close();
            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (pst != null) {
                    pst.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return attrList;
        }
    }

    /*
    Select distinct m.title from movie m where m.id in (select  g.movieId from movieGenre g 
full outer join movieCountry c on g.movieId = c.movieId 
full outer join movieDirector d on g.movieId = d.movieid
full outer join movieactor a on g.MOVIEID = a.MOVIEID 
where g.genre in ( 'IMAX') or c.country in ('Algeria') or d.directorname in ('Farah Khan') 
or a.ACTORNAME in ('Deepika Padukone') ) order by m.TITLE;
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> AActor;
    private javax.swing.JList<String> ACountry;
    private javax.swing.JList<String> ADirector;
    private javax.swing.JList<String> AGenre;
    private javax.swing.JList<String> SActor;
    private javax.swing.JList<String> SCountry;
    private javax.swing.JList<String> SDirector;
    private javax.swing.JList<String> SGenre;
    private javax.swing.JButton addActor;
    private javax.swing.JButton addCountry;
    private javax.swing.JButton addDirector;
    private javax.swing.JButton addGenre;
    private javax.swing.JButton addNumRate;
    private javax.swing.JButton addRating;
    private javax.swing.JButton addYear;
    private javax.swing.JButton andButton;
    private javax.swing.JButton attrButton;
    private javax.swing.JTextArea displayQuery;
    private javax.swing.JButton executeAnd;
    private javax.swing.JButton executeOr;
    private javax.swing.JButton executeSingle;
    private com.toedter.calendar.JDateChooser fromDate;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JList<String> movieList;
    private javax.swing.JComboBox<String> numCondition;
    private javax.swing.JTextField numRateValue;
    private javax.swing.JButton orButton;
    private javax.swing.JTextArea queryBuilder;
    private javax.swing.JComboBox<String> rateCondition;
    private javax.swing.JTextField rateValue;
    private javax.swing.JButton ratingButton;
    private javax.swing.JButton reset;
    private javax.swing.JList<String> result;
    private javax.swing.JButton searchActor;
    private javax.swing.JButton searchCountry;
    private javax.swing.JButton searchDirector;
    private javax.swing.JButton searchMovie;
    private javax.swing.JTextArea selectValue;
    private com.toedter.calendar.JDateChooser toDate;
    private javax.swing.JButton userButton;
    private javax.swing.JComboBox<String> userCondition;
    private javax.swing.JTextField userId;
    private javax.swing.JTextField userValue;
    private com.toedter.calendar.JYearChooser yearFrom;
    private com.toedter.calendar.JYearChooser yearTo;
    // End of variables declaration//GEN-END:variables
}
